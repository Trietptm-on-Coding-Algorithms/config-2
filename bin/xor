#!/usr/bin/env python
import argparse, sys, struct

p = argparse.ArgumentParser(usage='''
XOR binary data.  Example: $ echo -n hello | xor --byte 0xff | xxd''')
p.add_argument('--file', nargs='?', type=argparse.FileType('r'),
               default=sys.stdin, help='File to process (default stdin)')
p.add_argument('--byte')
p.add_argument('--word')
p.add_argument('--dword')
args = p.parse_args()

data = args.file.read()

def chunks(iterable, size):
    """Split iterable into size-sized chunks
    >>> x = [1,2,3,4,5,6,7,8,9]
    >>> chunks(x, 3)
    [(1, 2, 3), (4, 5, 6), (7, 8, 9)]
    """
    return zip(*[iter(iterable)]*size)

def parseInt(i):
    """Parse an integer.
    >>> parseInt(7)
    7
    >>> parseInt('7')
    7
    >>> parseInt('0x100')
    256
    """
    if type(i) == int: return i
    if type(i) == str:
        if i.startswith('0x'): return int(i,16)
        else:                  return int(i)
    return None

key = 0
fmt = ''

operations = [
    [args.byte, 'B', 1],
    [args.word, 'H', 2],
    [args.dword, 'L', 4]
]

for key,typ,size in operations:
    if key:
        key = parseInt(key)
        while len(data) % size:
            data += '\x00'
        fmt = '=%i%s' % (len(data)/size, typ)
        break

# print "Before: " + repr(data)
data = struct.unpack(fmt, data)
# print "Unpacked: " + repr(data)
data = [i^key for i in data]
# print "XORed: " + repr(data)
data = struct.pack(fmt, *data)
# print "Repacked: " + repr(data)

print data

